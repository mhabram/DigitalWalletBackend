// <auto-generated />
using System;
using DigitalWallet.Infrastructure.Savings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigitalWallet.Infrastructure.Persistence.Migratons.Savings
{
    [DbContext(typeof(SavingDbContext))]
    [Migration("20231205150424_InitialSavingMigration")]
    partial class InitialSavingMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Saving")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DigitalWallet.Domain.Savings.Aggregates.SavingsAggregate.Saving", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Savings", "Saving");
                });

            modelBuilder.Entity("DigitalWallet.Domain.Savings.Aggregates.SavingsAggregate.Saving", b =>
                {
                    b.OwnsMany("DigitalWallet.Domain.Savings.Aggregates.SavingsAggregate.Entities.SavingTransaction", "Transactions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("SavingId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("Modified")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id", "SavingId");

                            b1.HasIndex("SavingId");

                            b1.ToTable("SavingTransactions", "Saving");

                            b1.WithOwner()
                                .HasForeignKey("SavingId");

                            b1.OwnsOne("DigitalWallet.Domain.Common.ValueObjects.DepositType", "DepositType", b2 =>
                                {
                                    b2.Property<Guid>("SavingTransactionId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("SavingTransactionSavingId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("DepositType");

                                    b2.HasKey("SavingTransactionId", "SavingTransactionSavingId");

                                    b2.ToTable("SavingTransactions", "Saving");

                                    b2.WithOwner()
                                        .HasForeignKey("SavingTransactionId", "SavingTransactionSavingId");
                                });

                            b1.Navigation("DepositType")
                                .IsRequired();
                        });

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
